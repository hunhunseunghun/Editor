{"version":3,"sources":["../src/index.ts","../src/components/LumirEditor.tsx","../src/utils/cn.ts"],"sourcesContent":["'use client';\r\nexport { default as LumirEditor } from './components/LumirEditor';\r\nexport type {\r\n  LumirEditorProps,\r\n  EditorType,\r\n  DefaultPartialBlock,\r\n} from './components/LumirEditor';\r\nexport type {\r\n  DefaultBlockSchema,\r\n  DefaultInlineContentSchema,\r\n  DefaultStyleSchema,\r\n  PartialBlock,\r\n  BlockNoteEditor,\r\n} from '@blocknote/core';\r\nexport { cn } from './utils/cn';\r\n","'use client';\r\n\r\nimport React, { useEffect, useMemo } from 'react';\r\nimport {\r\n  useCreateBlockNote,\r\n  SideMenu as BlockSideMenu,\r\n  SideMenuController,\r\n  DragHandleButton,\r\n  SuggestionMenuController,\r\n  getDefaultReactSlashMenuItems,\r\n} from '@blocknote/react';\r\nimport { BlockNoteView } from '@blocknote/mantine';\r\nimport { cn } from '../utils/cn';\r\n\r\nimport type {\r\n  BlockNoteEditor as CoreBlockNoteEditor,\r\n  PartialBlock,\r\n  DefaultBlockSchema,\r\n  DefaultInlineContentSchema,\r\n  DefaultStyleSchema,\r\n} from '@blocknote/core';\r\n\r\nexport type EditorType = CoreBlockNoteEditor<\r\n  DefaultBlockSchema,\r\n  DefaultInlineContentSchema,\r\n  DefaultStyleSchema\r\n>;\r\nexport type DefaultPartialBlock = PartialBlock<\r\n  DefaultBlockSchema,\r\n  DefaultInlineContentSchema,\r\n  DefaultStyleSchema\r\n>;\r\n\r\nexport interface LumirEditorProps {\r\n  // Editor options\r\n  initialContent?: DefaultPartialBlock[];\r\n  uploadFile?: (file: File) => Promise<string>;\r\n  // 외부 업로더(uploadFile)가 없을 때의 폴백 저장 방식: true=Base64, false=ObjectURL\r\n  storeImagesAsBase64?: boolean;\r\n  // 미디어 업로드 허용 범위(기본 비활성)\r\n  allowVideoUpload?: boolean;\r\n  allowAudioUpload?: boolean;\r\n  // 일반 파일 업로드 허용 (기본 비활성)\r\n  allowFileUpload?: boolean;\r\n  pasteHandler?: (ctx: {\r\n    event: ClipboardEvent;\r\n    editor: EditorType;\r\n    defaultPasteHandler: (context?: {\r\n      pasteBehavior?: 'prefer-markdown' | 'prefer-html';\r\n    }) => boolean | undefined;\r\n  }) => boolean | undefined;\r\n  tables?: {\r\n    splitCells?: boolean;\r\n    cellBackgroundColor?: boolean;\r\n    cellTextColor?: boolean;\r\n    headers?: boolean;\r\n  };\r\n  heading?: { levels?: (1 | 2 | 3 | 4 | 5 | 6)[] };\r\n  animations?: boolean;\r\n  defaultStyles?: boolean;\r\n  disableExtensions?: string[];\r\n  domAttributes?: Record<string, string>;\r\n  tabBehavior?: 'prefer-navigate-ui' | 'prefer-indent';\r\n  trailingBlock?: boolean;\r\n  resolveFileUrl?: (url: string) => Promise<string>;\r\n\r\n  // View options\r\n  editable?: boolean;\r\n  theme?:\r\n    | 'light'\r\n    | 'dark'\r\n    | Partial<Record<string, unknown>>\r\n    | {\r\n        light: Partial<Record<string, unknown>>;\r\n        dark: Partial<Record<string, unknown>>;\r\n      };\r\n  formattingToolbar?: boolean;\r\n  linkToolbar?: boolean;\r\n  sideMenu?: boolean;\r\n  slashMenu?: boolean;\r\n  emojiPicker?: boolean;\r\n  filePanel?: boolean;\r\n  tableHandles?: boolean;\r\n  comments?: boolean;\r\n  onSelectionChange?: () => void;\r\n  className?: string;\r\n  includeDefaultStyles?: boolean; // 기본 스타일 포함 여부\r\n  // Add block(플러스) 버튼 토글: true(기본) = 표시, false = 숨김(드래그 핸들은 유지)\r\n  sideMenuAddButton?: boolean;\r\n\r\n  // Callbacks / refs\r\n  onContentChange?: (content: DefaultPartialBlock[]) => void;\r\n  editorRef?: React.MutableRefObject<EditorType | null>;\r\n}\r\n\r\nconst createObjectUrlUploader = async (file: File): Promise<string> => {\r\n  return URL.createObjectURL(file);\r\n};\r\n\r\nconst fileToBase64 = async (file: File): Promise<string> =>\r\n  await new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => resolve(String(reader.result));\r\n    reader.onerror = () => reject(new Error('FileReader failed'));\r\n    reader.readAsDataURL(file);\r\n  });\r\n\r\nexport default function LumirEditor({\r\n  // editor options\r\n  initialContent,\r\n  uploadFile,\r\n  pasteHandler,\r\n  tables,\r\n  heading,\r\n  animations = true,\r\n  defaultStyles = true,\r\n  disableExtensions,\r\n  domAttributes,\r\n  tabBehavior = 'prefer-navigate-ui',\r\n  trailingBlock = true,\r\n  resolveFileUrl,\r\n  storeImagesAsBase64 = true,\r\n  allowVideoUpload = false,\r\n  allowAudioUpload = false,\r\n  allowFileUpload = false,\r\n  // view options\r\n  editable = true,\r\n  theme = 'light',\r\n  formattingToolbar = true,\r\n  linkToolbar = true,\r\n  sideMenu = true,\r\n  slashMenu = true,\r\n  emojiPicker = true,\r\n  filePanel = true,\r\n  tableHandles = true,\r\n  comments = true,\r\n  onSelectionChange,\r\n  className = '',\r\n  includeDefaultStyles = true,\r\n  sideMenuAddButton = true,\r\n  // callbacks / refs\r\n  onContentChange,\r\n  editorRef,\r\n}: LumirEditorProps) {\r\n  const validatedContent = useMemo<DefaultPartialBlock[]>(() => {\r\n    const defaultContent: DefaultPartialBlock[] = [\r\n      {\r\n        type: 'paragraph',\r\n        props: {\r\n          textColor: 'default',\r\n          backgroundColor: 'default',\r\n          textAlignment: 'left',\r\n        },\r\n        content: [{ type: 'text', text: '', styles: {} }],\r\n        children: [],\r\n      },\r\n    ];\r\n    if (!initialContent || initialContent.length === 0) {\r\n      return defaultContent;\r\n    }\r\n    return initialContent;\r\n  }, [initialContent]);\r\n\r\n  const editor = useCreateBlockNote<\r\n    DefaultBlockSchema,\r\n    DefaultInlineContentSchema,\r\n    DefaultStyleSchema\r\n  >(\r\n    {\r\n      initialContent: validatedContent as DefaultPartialBlock[],\r\n      tables: {\r\n        splitCells: tables?.splitCells ?? true,\r\n        cellBackgroundColor: tables?.cellBackgroundColor ?? true,\r\n        cellTextColor: tables?.cellTextColor ?? true,\r\n        headers: tables?.headers ?? true,\r\n      },\r\n      heading:\r\n        heading?.levels && heading.levels.length > 0\r\n          ? heading\r\n          : { levels: [1, 2, 3, 4, 5, 6] as (1 | 2 | 3 | 4 | 5 | 6)[] },\r\n      animations,\r\n      defaultStyles,\r\n      // 확장 비활성: 비디오/오디오만 제어(파일 확장은 내부 드롭 로직 의존 → 비활성화하지 않음)\r\n      disableExtensions: useMemo(() => {\r\n        const set = new Set<string>(disableExtensions ?? []);\r\n        if (!allowVideoUpload) set.add('video');\r\n        if (!allowAudioUpload) set.add('audio');\r\n        return Array.from(set);\r\n      }, [disableExtensions, allowVideoUpload, allowAudioUpload]),\r\n      domAttributes,\r\n      tabBehavior,\r\n      trailingBlock,\r\n      resolveFileUrl,\r\n      uploadFile: async (file) => {\r\n        const custom = uploadFile;\r\n        const fallback = storeImagesAsBase64\r\n          ? fileToBase64\r\n          : createObjectUrlUploader;\r\n        try {\r\n          if (custom) return await custom(file);\r\n          return await fallback(file);\r\n        } catch (_) {\r\n          // Fallback to ObjectURL when FileReader or custom upload fails\r\n          try {\r\n            return await createObjectUrlUploader(file);\r\n          } catch {\r\n            throw new Error('Failed to process file for upload');\r\n          }\r\n        }\r\n      },\r\n      pasteHandler: (ctx) => {\r\n        const { event, editor, defaultPasteHandler } = ctx as any;\r\n        const fileList =\r\n          (event?.clipboardData?.files as FileList | null) ?? null;\r\n        const files: File[] = fileList ? Array.from(fileList) : [];\r\n        const accepted: File[] = files.filter(\r\n          (f: File) =>\r\n            f.size > 0 &&\r\n            (f.type?.startsWith('image/') ||\r\n              (!f.type &&\r\n                /\\.(png|jpe?g|gif|webp|bmp|svg)$/i.test(f.name || ''))),\r\n        );\r\n        // 파일 항목이 있으나 허용되지 않으면 기본 처리도 막고 무시\r\n        if (files.length > 0 && accepted.length === 0) {\r\n          event.preventDefault();\r\n          return true;\r\n        }\r\n        if (accepted.length === 0) return defaultPasteHandler() ?? false;\r\n        event.preventDefault();\r\n        (async () => {\r\n          const doUpload =\r\n            uploadFile ??\r\n            (storeImagesAsBase64 ? fileToBase64 : createObjectUrlUploader);\r\n          for (const file of accepted) {\r\n            try {\r\n              const url = await doUpload(file);\r\n              editor.pasteHTML(`<img src=\"${url}\" alt=\"image\" />`);\r\n            } catch (err) {\r\n              // 업로드 실패 파일은 삽입하지 않음 (삭제/스킵)\r\n              // console.warn로만 기록하여 UI 오류를 막음\r\n              console.warn(\r\n                'Image upload failed, skipped:',\r\n                file.name || '',\r\n                err,\r\n              );\r\n              continue;\r\n            }\r\n          }\r\n        })();\r\n        return true;\r\n      },\r\n    },\r\n    [\r\n      uploadFile,\r\n      pasteHandler,\r\n      storeImagesAsBase64,\r\n      allowVideoUpload,\r\n      allowAudioUpload,\r\n      allowFileUpload,\r\n      tables?.splitCells,\r\n      tables?.cellBackgroundColor,\r\n      tables?.cellTextColor,\r\n      tables?.headers,\r\n      heading?.levels?.join(','),\r\n      animations,\r\n      defaultStyles,\r\n      disableExtensions?.join(','),\r\n      domAttributes ? JSON.stringify(domAttributes) : undefined,\r\n      tabBehavior,\r\n      trailingBlock,\r\n      resolveFileUrl,\r\n    ],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!editor) return;\r\n    editor.isEditable = editable;\r\n    const el = editor.domElement as HTMLElement | undefined;\r\n    if (!editable) {\r\n      if (el) {\r\n        el.style.userSelect = 'text';\r\n        (\r\n          el.style as CSSStyleDeclaration & { webkitUserSelect?: string }\r\n        ).webkitUserSelect = 'text';\r\n      }\r\n    }\r\n  }, [editor, editable]);\r\n\r\n  useEffect(() => {\r\n    if (!editor || !onContentChange) return;\r\n    let lastContent = '';\r\n    const handleContentChange = () => {\r\n      const topLevelBlocks =\r\n        editor.topLevelBlocks as unknown as DefaultPartialBlock[];\r\n      const currentContent = JSON.stringify(topLevelBlocks);\r\n      if (lastContent === currentContent) return;\r\n      lastContent = currentContent;\r\n      onContentChange(topLevelBlocks);\r\n    };\r\n    editor.onEditorContentChange(handleContentChange);\r\n    return () => {};\r\n  }, [editor, onContentChange]);\r\n\r\n  // 외부에서 imperative API 접근을 위한 ref 연결\r\n  useEffect(() => {\r\n    if (!editorRef) return;\r\n    editorRef.current = editor ?? null;\r\n    return () => {\r\n      if (editorRef) editorRef.current = null;\r\n    };\r\n  }, [editor, editorRef]);\r\n\r\n  useEffect(() => {\r\n    const el = editor?.domElement as HTMLElement | undefined;\r\n    if (!el) return;\r\n    const handleDragOver = (e: DragEvent) => {\r\n      if (e.defaultPrevented) return;\r\n      const hasFiles = (\r\n        e.dataTransfer?.types as unknown as string[] | undefined\r\n      )?.includes?.('Files');\r\n      if (hasFiles) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // @ts-ignore\r\n        if (typeof (e as any).stopImmediatePropagation === 'function') {\r\n          // @ts-ignore\r\n          (e as any).stopImmediatePropagation();\r\n        }\r\n      }\r\n    };\r\n\r\n    const handleDrop = (e: DragEvent) => {\r\n      if (!e.dataTransfer) return;\r\n      const hasFiles = (\r\n        (e.dataTransfer.types as unknown as string[] | undefined) ?? []\r\n      ).includes('Files');\r\n      if (!hasFiles) return;\r\n\r\n      // 기본 드롭 동작을 항상 차단해, 허용되지 않는 파일이 렌더링되지 않도록 함\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      // @ts-ignore\r\n      (e as any).stopImmediatePropagation?.();\r\n\r\n      // DataTransferItem 우선 (디렉토리/가짜 항목 배제)\r\n      const items = Array.from(e.dataTransfer.items ?? []);\r\n      const files = items\r\n        .filter((it) => it.kind === 'file')\r\n        .map((it) => it.getAsFile())\r\n        .filter((f): f is File => !!f);\r\n\r\n      const accepted = files.filter(\r\n        (f) =>\r\n          f.size > 0 &&\r\n          (f.type?.startsWith('image/') ||\r\n            (!f.type && /\\.(png|jpe?g|gif|webp|bmp|svg)$/i.test(f.name || ''))),\r\n      );\r\n      if (accepted.length === 0) return; // 차단만 하고 아무것도 삽입하지 않음\r\n\r\n      (async () => {\r\n        const doUpload =\r\n          uploadFile ??\r\n          (storeImagesAsBase64 ? fileToBase64 : createObjectUrlUploader);\r\n        for (const f of accepted) {\r\n          try {\r\n            const url = await doUpload(f);\r\n            editor?.pasteHTML(`<img src=\"${url}\" alt=\"image\" />`);\r\n          } catch (err) {\r\n            // 실패 파일은 삽입하지 않음\r\n            console.warn('Image upload failed, skipped:', f.name || '', err);\r\n            continue;\r\n          }\r\n        }\r\n      })();\r\n    };\r\n    el.addEventListener('dragover', handleDragOver, { capture: true });\r\n    el.addEventListener('drop', handleDrop, { capture: true });\r\n    return () => {\r\n      el.removeEventListener('dragover', handleDragOver, {\r\n        capture: true,\r\n      } as any);\r\n      el.removeEventListener('drop', handleDrop, { capture: true } as any);\r\n    };\r\n  }, [\r\n    editor,\r\n    uploadFile,\r\n    storeImagesAsBase64,\r\n    allowVideoUpload,\r\n    allowAudioUpload,\r\n  ]);\r\n\r\n  // Add block 버튼을 끄면 기본 SideMenu를 비활성화하고 커스텀 SideMenu만 렌더(드래그 핸들 유지)\r\n  const computedSideMenu = sideMenuAddButton ? sideMenu : false;\r\n\r\n  // 공식 가이드 방식: 커스텀 SideMenu 컴포넌트 전달 (버튼 미제공 → 플러스 버튼 없음)\r\n  // 공식 가이드 패턴: props를 전달받아 DragHandleButton만 유지\r\n  const DragHandleOnlySideMenu = (props: any) => {\r\n    return (\r\n      <BlockSideMenu {...props}>\r\n        <DragHandleButton {...props} />\r\n      </BlockSideMenu>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BlockNoteView\r\n      className={cn(\r\n        includeDefaultStyles &&\r\n          'lumirEditor w-full h-full overflow-auto [&_[data-content-type=\"paragraph\"]]:text-[14px]',\r\n        className,\r\n      )}\r\n      editor={editor}\r\n      editable={editable}\r\n      theme={theme as 'light' | 'dark' | undefined}\r\n      formattingToolbar={formattingToolbar}\r\n      linkToolbar={linkToolbar}\r\n      sideMenu={computedSideMenu}\r\n      slashMenu={false}\r\n      emojiPicker={emojiPicker}\r\n      filePanel={filePanel}\r\n      tableHandles={tableHandles}\r\n      comments={comments}\r\n      onSelectionChange={onSelectionChange}>\r\n      <SuggestionMenuController\r\n        triggerCharacter='/'\r\n        getItems={async (query: string) => {\r\n          const items = getDefaultReactSlashMenuItems(editor);\r\n          const filtered = items.filter((it: any) => {\r\n            const k = (it?.key || '').toString();\r\n            if (['video', 'audio', 'file'].includes(k)) return false;\r\n            return true;\r\n          });\r\n          if (!query) return filtered;\r\n          const q = query.toLowerCase();\r\n          return filtered.filter(\r\n            (it: any) =>\r\n              (it.title || '').toLowerCase().includes(q) ||\r\n              (it.aliases || []).some((a: string) =>\r\n                a.toLowerCase().includes(q),\r\n              ),\r\n          );\r\n        }}\r\n      />\r\n      {!sideMenuAddButton && (\r\n        <SideMenuController sideMenu={DragHandleOnlySideMenu} />\r\n      )}\r\n    </BlockNoteView>\r\n  );\r\n}\r\n","// clsx와 tailwind-merge를 사용한 className 유틸리티\r\n// 사용자가 직접 설치하도록 권장하거나, 간단한 버전 제공\r\n\r\nexport function cn(...inputs: (string | undefined | null | false)[]) {\r\n  return inputs.filter(Boolean).join(' ');\r\n}\r\n"],"mappings":"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","names":["import_react","editor","BlockSideMenu"]}