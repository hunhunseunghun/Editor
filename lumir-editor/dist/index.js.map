{"version":3,"sources":["../src/index.ts","../src/components/LumirEditor.tsx","../src/utils/cn.ts"],"sourcesContent":["'use client';\r\n\r\n// 컴포넌트 및 유틸리티 export\r\nexport {\r\n  default as LumirEditor,\r\n  ContentUtils,\r\n  EditorConfig,\r\n} from './components/LumirEditor';\r\nexport { cn } from './utils/cn';\r\n\r\n// 타입 export (별도 파일에서 관리)\r\nexport type {\r\n  LumirEditorProps,\r\n  EditorType,\r\n  DefaultPartialBlock,\r\n  DefaultBlockSchema,\r\n  DefaultInlineContentSchema,\r\n  DefaultStyleSchema,\r\n  PartialBlock,\r\n  BlockNoteEditor,\r\n} from './types';\r\n","'use client';\n\nimport { useEffect, useMemo, useCallback } from 'react';\nimport {\n  useCreateBlockNote,\n  SideMenu as BlockSideMenu,\n  SideMenuController,\n  DragHandleButton,\n  SuggestionMenuController,\n  getDefaultReactSlashMenuItems,\n} from '@blocknote/react';\nimport { BlockNoteView } from '@blocknote/mantine';\nimport { cn } from '../utils/cn';\n\nimport type {\n  DefaultPartialBlock,\n  LumirEditorProps,\n  DefaultBlockSchema,\n  DefaultInlineContentSchema,\n  DefaultStyleSchema,\n} from '../types';\n\n// ==========================================\n// 유틸리티 클래스들\n// ==========================================\n\n/**\n * 콘텐츠 관리 유틸리티\n * 기본 블록 생성 및 콘텐츠 검증 로직을 담당\n */\nexport class ContentUtils {\n  /**\n   * JSON 문자열의 유효성을 검증합니다\n   * @param jsonString 검증할 JSON 문자열\n   * @returns 유효한 JSON 문자열인지 여부\n   */\n  static isValidJSONString(jsonString: string): boolean {\n    try {\n      const parsed = JSON.parse(jsonString);\n      return Array.isArray(parsed);\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * JSON 문자열을 DefaultPartialBlock 배열로 파싱합니다\n   * @param jsonString JSON 문자열\n   * @returns 파싱된 블록 배열 또는 null (파싱 실패 시)\n   */\n  static parseJSONContent(jsonString: string): DefaultPartialBlock[] | null {\n    try {\n      const parsed = JSON.parse(jsonString);\n      if (Array.isArray(parsed)) {\n        return parsed as DefaultPartialBlock[];\n      }\n      return null;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * 기본 paragraph 블록 생성\n   * @returns 기본 설정이 적용된 DefaultPartialBlock\n   */\n  static createDefaultBlock(): DefaultPartialBlock {\n    return {\n      type: 'paragraph',\n      props: {\n        textColor: 'default',\n        backgroundColor: 'default',\n        textAlignment: 'left',\n      },\n      content: [{ type: 'text', text: '', styles: {} }],\n      children: [],\n    };\n  }\n\n  /**\n   * 콘텐츠 유효성 검증 및 기본값 설정\n   * @param content 사용자 제공 콘텐츠 (객체 배열 또는 JSON 문자열)\n   * @param emptyBlockCount 빈 블록 개수 (기본값: 3)\n   * @returns 검증된 콘텐츠 배열\n   */\n  static validateContent(\n    content?: DefaultPartialBlock[] | string,\n    emptyBlockCount: number = 3,\n  ): DefaultPartialBlock[] {\n    // 1. 문자열인 경우 JSON 파싱 시도\n    if (typeof content === 'string') {\n      if (content.trim() === '') {\n        return this.createEmptyBlocks(emptyBlockCount);\n      }\n\n      const parsedContent = this.parseJSONContent(content);\n      if (parsedContent && parsedContent.length > 0) {\n        return parsedContent;\n      }\n\n      // 파싱 실패 시 빈 블록 생성\n      return this.createEmptyBlocks(emptyBlockCount);\n    }\n\n    // 2. 배열인 경우 기존 로직\n    if (!content || content.length === 0) {\n      return this.createEmptyBlocks(emptyBlockCount);\n    }\n\n    return content;\n  }\n\n  /**\n   * 빈 블록들을 생성합니다\n   * @param emptyBlockCount 생성할 블록 개수\n   * @returns 생성된 빈 블록 배열\n   */\n  private static createEmptyBlocks(\n    emptyBlockCount: number,\n  ): DefaultPartialBlock[] {\n    return Array.from({ length: emptyBlockCount }, () =>\n      this.createDefaultBlock(),\n    );\n  }\n}\n\n/**\n * 에디터 설정 관리 유틸리티\n * 각종 설정의 기본값과 검증 로직을 담당\n */\nexport class EditorConfig {\n  /**\n   * 테이블 설정 기본값 적용\n   * @param userTables 사용자 테이블 설정\n   * @returns 기본값이 적용된 테이블 설정\n   */\n  static getDefaultTableConfig(userTables?: LumirEditorProps['tables']) {\n    return {\n      splitCells: userTables?.splitCells ?? true,\n      cellBackgroundColor: userTables?.cellBackgroundColor ?? true,\n      cellTextColor: userTables?.cellTextColor ?? true,\n      headers: userTables?.headers ?? true,\n    };\n  }\n\n  /**\n   * 헤딩 설정 기본값 적용\n   * @param userHeading 사용자 헤딩 설정\n   * @returns 기본값이 적용된 헤딩 설정\n   */\n  static getDefaultHeadingConfig(userHeading?: LumirEditorProps['heading']) {\n    return userHeading?.levels && userHeading.levels.length > 0\n      ? userHeading\n      : { levels: [1, 2, 3, 4, 5, 6] as (1 | 2 | 3 | 4 | 5 | 6)[] };\n  }\n\n  /**\n   * 비활성화할 확장 기능 목록 생성\n   * @param userExtensions 사용자 정의 비활성 확장\n   * @param allowVideo 비디오 업로드 허용 여부\n   * @param allowAudio 오디오 업로드 허용 여부\n   * @param allowFile 일반 파일 업로드 허용 여부\n   * @returns 비활성화할 확장 기능 목록\n   */\n  static getDisabledExtensions(\n    userExtensions?: string[],\n    allowVideo = false,\n    allowAudio = false,\n    allowFile = false,\n  ): string[] {\n    const set = new Set<string>(userExtensions ?? []);\n    if (!allowVideo) set.add('video');\n    if (!allowAudio) set.add('audio');\n    if (!allowFile) set.add('file');\n    return Array.from(set);\n  }\n}\n\nconst createObjectUrlUploader = async (file: File): Promise<string> => {\n  return URL.createObjectURL(file);\n};\n\n// 파일 타입 검증 함수\nconst isImageFile = (file: File): boolean => {\n  return (\n    file.size > 0 &&\n    (file.type?.startsWith('image/') ||\n      (!file.type && /\\.(png|jpe?g|gif|webp|bmp|svg)$/i.test(file.name || '')))\n  );\n};\n\n// 이미지 파일을 Base64로 변환하는 함수\nconst fileToBase64 = async (file: File): Promise<string> =>\n  await new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(String(reader.result));\n    reader.onerror = () => reject(new Error('FileReader failed'));\n    reader.readAsDataURL(file);\n  });\n\nexport default function LumirEditor({\n  // editor options\n  initialContent,\n  initialEmptyBlocks = 3,\n  uploadFile,\n  tables,\n  heading,\n  animations = true,\n  defaultStyles = true,\n  disableExtensions,\n  tabBehavior = 'prefer-navigate-ui',\n  trailingBlock = true,\n  resolveFileUrl,\n  storeImagesAsBase64 = true,\n  allowVideoUpload = false,\n  allowAudioUpload = false,\n  allowFileUpload = false,\n  // view options\n  editable = true,\n  theme = 'light',\n  formattingToolbar = true,\n  linkToolbar = true,\n  sideMenu = true,\n  slashMenu = true,\n  emojiPicker = true,\n  filePanel = true,\n  tableHandles = true,\n  onSelectionChange,\n  className = '',\n  sideMenuAddButton = false,\n  // callbacks / refs\n  onContentChange,\n}: LumirEditorProps) {\n  const validatedContent = useMemo<DefaultPartialBlock[]>(() => {\n    return ContentUtils.validateContent(initialContent, initialEmptyBlocks);\n  }, [initialContent, initialEmptyBlocks]);\n\n  // 테이블 설정 메모이제이션\n  const tableConfig = useMemo(() => {\n    return EditorConfig.getDefaultTableConfig(tables);\n  }, [\n    tables?.splitCells,\n    tables?.cellBackgroundColor,\n    tables?.cellTextColor,\n    tables?.headers,\n  ]);\n\n  // 헤딩 설정 메모이제이션\n  const headingConfig = useMemo(() => {\n    return EditorConfig.getDefaultHeadingConfig(heading);\n  }, [heading?.levels?.join(',') ?? '']);\n\n  // 비활성화 확장 메모이제이션\n  const disabledExtensions = useMemo(() => {\n    return EditorConfig.getDisabledExtensions(\n      disableExtensions,\n      allowVideoUpload,\n      allowAudioUpload,\n      allowFileUpload,\n    );\n  }, [disableExtensions, allowVideoUpload, allowAudioUpload, allowFileUpload]);\n\n  const editor = useCreateBlockNote<\n    DefaultBlockSchema,\n    DefaultInlineContentSchema,\n    DefaultStyleSchema\n  >(\n    {\n      initialContent: validatedContent as DefaultPartialBlock[],\n      tables: tableConfig,\n      heading: headingConfig,\n      animations,\n      defaultStyles,\n      // 확장 비활성: 비디오/오디오/파일 제어\n      disableExtensions: disabledExtensions,\n      tabBehavior,\n      trailingBlock,\n      resolveFileUrl,\n      uploadFile: async (file) => {\n        // 이미지 파일만 허용 (이미지 전용 에디터)\n        if (!isImageFile(file)) {\n          throw new Error('Only image files are allowed');\n        }\n\n        const custom = uploadFile;\n        const fallback = storeImagesAsBase64\n          ? fileToBase64\n          : createObjectUrlUploader;\n        try {\n          if (custom) return await custom(file);\n          return await fallback(file);\n        } catch (_) {\n          // Fallback to ObjectURL when FileReader or custom upload fails\n          try {\n            return await createObjectUrlUploader(file);\n          } catch {\n            throw new Error('Failed to process file for upload');\n          }\n        }\n      },\n      pasteHandler: (ctx) => {\n        const { event, editor, defaultPasteHandler } = ctx as any;\n        const fileList =\n          (event?.clipboardData?.files as FileList | null) ?? null;\n        const files: File[] = fileList ? Array.from(fileList) : [];\n        const acceptedFiles: File[] = files.filter(isImageFile);\n\n        // 파일이 있지만 이미지가 없으면 기본 처리 막고 무시\n        if (files.length > 0 && acceptedFiles.length === 0) {\n          event.preventDefault();\n          return true;\n        }\n\n        // 이미지가 없으면 기본 처리\n        if (acceptedFiles.length === 0) {\n          return defaultPasteHandler() ?? false;\n        }\n\n        event.preventDefault();\n        (async () => {\n          for (const file of acceptedFiles) {\n            try {\n              // 에디터의 uploadFile 함수 사용 (통일된 로직)\n              const url = await editor.uploadFile(file);\n              editor.pasteHTML(`<img src=\"${url}\" alt=\"image\" />`);\n            } catch (err) {\n              console.warn(\n                'Image upload failed, skipped:',\n                file.name || '',\n                err,\n              );\n            }\n          }\n        })();\n        return true;\n      },\n    },\n    [\n      validatedContent,\n      tableConfig,\n      headingConfig,\n      animations,\n      defaultStyles,\n      disabledExtensions,\n      tabBehavior,\n      trailingBlock,\n      resolveFileUrl,\n      uploadFile,\n      storeImagesAsBase64,\n    ],\n  );\n\n  // 편집 가능 여부 설정\n  useEffect(() => {\n    if (editor) {\n      editor.isEditable = editable;\n    }\n  }, [editor, editable]);\n\n  // 콘텐츠 변경 감지\n  useEffect(() => {\n    if (!editor || !onContentChange) return;\n\n    const handleContentChange = () => {\n      // BlockNote의 올바른 API 사용\n      const blocks = editor.topLevelBlocks as DefaultPartialBlock[];\n      onContentChange(blocks);\n    };\n\n    return editor.onEditorContentChange(handleContentChange);\n  }, [editor, onContentChange]);\n\n  // 드래그앤드롭 이미지 처리\n  useEffect(() => {\n    const el = editor?.domElement as HTMLElement | undefined;\n    if (!el) return;\n\n    const handleDragOver = (e: DragEvent) => {\n      if (e.defaultPrevented) return;\n      const hasFiles = (\n        e.dataTransfer?.types as unknown as string[] | undefined\n      )?.includes?.('Files');\n      if (hasFiles) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    };\n\n    const handleDrop = (e: DragEvent) => {\n      if (!e.dataTransfer) return;\n      const hasFiles = (\n        (e.dataTransfer.types as unknown as string[] | undefined) ?? []\n      ).includes('Files');\n      if (!hasFiles) return;\n\n      e.preventDefault();\n      e.stopPropagation();\n\n      const items = Array.from(e.dataTransfer.items ?? []);\n      const files = items\n        .filter((it) => it.kind === 'file')\n        .map((it) => it.getAsFile())\n        .filter((f): f is File => !!f);\n\n      // 이미지 파일만 허용\n      const acceptedFiles = files.filter(isImageFile);\n\n      if (acceptedFiles.length === 0) return;\n\n      (async () => {\n        for (const file of acceptedFiles) {\n          try {\n            // 에디터의 uploadFile 함수 사용 (일관된 로직)\n            if (editor?.uploadFile) {\n              const url = await editor.uploadFile(file);\n              if (url) {\n                editor.pasteHTML(`<img src=\"${url}\" alt=\"image\" />`);\n              }\n            }\n          } catch (err) {\n            console.warn('Image upload failed, skipped:', file.name || '', err);\n          }\n        }\n      })();\n    };\n\n    el.addEventListener('dragover', handleDragOver, { capture: true });\n    el.addEventListener('drop', handleDrop, { capture: true });\n\n    return () => {\n      el.removeEventListener('dragover', handleDragOver, {\n        capture: true,\n      } as any);\n      el.removeEventListener('drop', handleDrop, { capture: true } as any);\n    };\n  }, [editor]);\n\n  // SideMenu 설정 (Add 버튼 제어)\n  const computedSideMenu = useMemo(() => {\n    return sideMenuAddButton ? sideMenu : false;\n  }, [sideMenuAddButton, sideMenu]);\n\n  // Add 버튼 없는 사이드 메뉴 (드래그 핸들만) - 메모이제이션\n  const DragHandleOnlySideMenu = useMemo(() => {\n    return (props: any) => (\n      <BlockSideMenu {...props}>\n        <DragHandleButton {...props} />\n      </BlockSideMenu>\n    );\n  }, []);\n\n  return (\n    <div className={cn('lumirEditor', className)}>\n      <BlockNoteView\n        editor={editor}\n        editable={editable}\n        theme={theme}\n        formattingToolbar={formattingToolbar}\n        linkToolbar={linkToolbar}\n        sideMenu={computedSideMenu}\n        slashMenu={false}\n        emojiPicker={emojiPicker}\n        filePanel={filePanel}\n        tableHandles={tableHandles}\n        onSelectionChange={onSelectionChange}>\n        {slashMenu && (\n          <SuggestionMenuController\n            triggerCharacter='/'\n            getItems={useCallback(\n              async (query: string) => {\n                const items = getDefaultReactSlashMenuItems(editor);\n                // 비디오, 오디오, 파일 관련 항목 제거\n                const filtered = items.filter((item: any) => {\n                  const key = (item?.key || '').toString().toLowerCase();\n                  const title = (item?.title || '').toString().toLowerCase();\n                  // 비디오, 오디오, 파일 관련 항목 제거\n                  if (['video', 'audio', 'file'].includes(key)) return false;\n                  if (\n                    title.includes('video') ||\n                    title.includes('audio') ||\n                    title.includes('file')\n                  )\n                    return false;\n                  return true;\n                });\n\n                if (!query) return filtered;\n                const q = query.toLowerCase();\n                return filtered.filter(\n                  (item: any) =>\n                    item.title?.toLowerCase().includes(q) ||\n                    (item.aliases || []).some((a: string) =>\n                      a.toLowerCase().includes(q),\n                    ),\n                );\n              },\n              [editor],\n            )}\n          />\n        )}\n        {!sideMenuAddButton && (\n          <SideMenuController sideMenu={DragHandleOnlySideMenu} />\n        )}\n      </BlockNoteView>\n    </div>\n  );\n}\n","// clsx와 tailwind-merge를 사용한 className 유틸리티\r\n// 사용자가 직접 설치하도록 권장하거나, 간단한 버전 제공\r\n\r\nexport function cn(...inputs: (string | undefined | null | false)[]) {\r\n  return inputs.filter(Boolean).join(' ');\r\n}\r\n"],"mappings":"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","names":["import_react","editor","BlockSideMenu"]}